// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import art "github.com/plar/go-adaptive-radix-tree"

import mock "github.com/stretchr/testify/mock"

// Indexer is an autogenerated mock type for the Indexer type
type Indexer struct {
	mock.Mock
}

// Load provides a mock function with given fields: path, maxkeySize
func (_m *Indexer) Load(path string, maxkeySize uint32) (art.Tree, bool, error) {
	ret := _m.Called(path, maxkeySize)

	var r0 art.Tree
	if rf, ok := ret.Get(0).(func(string, uint32) art.Tree); ok {
		r0 = rf(path, maxkeySize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(art.Tree)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, uint32) bool); ok {
		r1 = rf(path, maxkeySize)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, uint32) error); ok {
		r2 = rf(path, maxkeySize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Save provides a mock function with given fields: t, path
func (_m *Indexer) Save(t art.Tree, path string) error {
	ret := _m.Called(t, path)

	var r0 error
	if rf, ok := ret.Get(0).(func(art.Tree, string) error); ok {
		r0 = rf(t, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
